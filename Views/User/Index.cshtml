@{
    ViewBag.Title = "Users";
    ViewBag.pTitle = "User Management";
    ViewBag.pageTitle = "Users";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <h4 class="mb-sm-0">@ViewBag.ptitle</h4>

            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="javascript: void(0);">@ViewBag.pagetitle</a></li>
                    <li class="breadcrumb-item active">@ViewBag.ptitle</li>
                </ol>
            </div>

        </div>
    </div>
</div>
<!-- end page title -->

<div class="card" id="userList">
    <div class="card-header border-0">
        <div class="row align-items-center gy-3">
            <div class="col-sm">
                <h5 class="card-title mb-0">Users</h5>
            </div>
            <div class="col-sm-auto">
                <div class="d-flex gap-1 flex-wrap">
                    <button type="button" class="btn btn-success add-btn" data-bs-toggle="modal" id="create-btn" data-bs-target="#addUser"><i class="ri-add-line align-bottom me-1"></i> Create User</button>
                    <button type="button" class="btn btn-info"><i class="ri-file-download-line align-bottom me-1"></i> Import</button>
                    <button class="btn btn-soft-danger" id="remove-actions" onClick="deleteMultiple()"><i class="ri-delete-bin-2-line"></i></button>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body border border-dashed border-end-0 border-start-0">
        <form>
            <div class="row g-3">
                <div class="col-xxl-4 col-sm-6">
                    <div class="search-box">
                        <input type="text" class="form-control search" placeholder="Search for userId,Name,Department or something...">
                        <i class="ri-search-line search-icon"></i>
                    </div>
                </div>
                <!--end col-->
                <!--end col-->
                <div class="col-xxl-2 col-sm-4">
                    <div>
                        <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="idUserType">
                            <option value="">Select Type</option>
                            <option value="all" selected>All</option>
                            <option value="User">User</option>
                        </select>
                    </div>
                </div>
                <!--end col-->
                <div class="col-xxl-2 col-sm-4">
                    <div>
                        <select class="form-control" data-choices data-choices-search-false name="choices-single-default" id="idsearchPermissionTo">
                            <option value="">Select PermissionTo</option>
                            <option value="all" selected>All</option> 
                        </select>
                    </div>
                </div>
                <!--end col-->
                <div class="col-lg-auto">
                    <div>
                        <button type="button" class="btn btn-primary w-100" onclick="SearchData();">
                            <i class="ri-equalizer-fill me-1 align-bottom"></i>
                            Filter
                        </button>
                    </div>
                </div>
                <!--end col-->
            </div>
            <!--end row-->
        </form>
    </div>
    <div class="card-body pt-2">
        <div> 
            <div class="table-responsive table-card mb-1">
                <table class="table table-nowrap align-middle" id="userTable">
                    <thead class="text-muted table-light">
                        <tr class="text-uppercase">
                            <th scope="col" style="width: 25px;">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="checkAll" value="option">
                                </div>
                            </th> 
                            <th class="sort" data-sort="id">Id</th>
                            <th class="sort" data-sort="userId">User ID</th>
                            <th class="sort" data-sort="userName">User Name</th>
                            <th class="sort" data-sort="userDepartment">Department</th>
                            <th class="sort" data-sort="userType">Type</th>
                            <th class="sort" data-sort="userEmailId">Email ID</th>
                            <th class="sort" data-sort="isActive">Status</th>
                            <th class="sort" data-sort="action">Action</th>
                        </tr>
                    </thead>
                    <tbody class="list form-check-all">
                        <tr id="idtruserTable">
                            <th scope="row">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="checkAll" value="option1">
                                </div>
                            </th>
                            <td class="id">VZ01</td>
                            <td class="userId">FRH01</td>
                            <td class="userName">Frank Hook</td>
                            <td class="userDepartment">Purchase</td>
                            <td class="userType">user</td>
                            <td class="userEmailId">frank@gmail.com</td>
                            <td class="isActive">Inactive</td>
                            @*  <td class="status">
                                <span class="badge bg-warning-subtle text-warning text-uppercase">Pending</span>
                            </td> *@
                            <td class="action">
                                <ul class="list-inline hstack gap-2 mb-0"> 
                                    <li class="list-inline-item edit" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-placement="top" title="Edit">
                                        <a href="#" data-bs-toggle="modal" class="text-primary d-inline-block edit-item-btn">
                                            <i class="ri-pencil-fill fs-16"></i>
                                        </a>
                                    </li>
                                    <li class="list-inline-item" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-placement="top" title="Remove">
                                        <a class="text-danger d-inline-block remove-item-btn" data-bs-toggle="modal" href="#">
                                            <i class="ri-delete-bin-5-fill fs-16"></i>
                                        </a>
                                    </li>
                                </ul>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="noresult" style="display: none">
                    <div class="text-center">
                        <lord-icon src="https://cdn.lordicon.com/msoeawqm.json" trigger="loop" colors="primary:#405189,secondary:#0ab39c" style="width:75px;height:75px"></lord-icon>
                        <h5 class="mt-2">Sorry! No Result Found</h5>
                        <p class="text-muted">We've searched more than 150+ Users We did not find any Users for you search.</p>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-end">
                <div class="pagination-wrap hstack gap-2">
                    <a class="page-item pagination-prev disabled" href="#">
                        Previous
                    </a>
                    <ul class="pagination listjs-pagination mb-0"></ul>
                    <a class="page-item pagination-next" href="#">
                        Next
                    </a>
                </div>
            </div>
        </div> 
    </div>
</div>

<div class="modal fade" id="addUser" tabindex="-1" aria-labelledby="addUserLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-light p-3">
            <h5 class="modal-title" id="addUserLabel">Create User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="close-modal"></button>
            </div>
                 
            <div class="modal-body"> 
            <div class="text-center">
                <div class="position-relative d-inline-block">
                    <div class="position-absolute  bottom-0 end-0">
                        <label for="usrprofile-img-file-input" class="mb-0" data-bs-toggle="tooltip" data-bs-placement="right" title="Select Image">
                            <div class="avatar-xs cursor-pointer">
                                <div class="avatar-title bg-light border rounded-circle text-muted">
                                    <i class="ri-image-fill"></i>
                                </div>
                            </div>
                        </label>
                        <input class="form-control d-none" value="" id="usrprofile-img-file-input" type="file" accept="image/png, image/gif, image/jpeg">
                    </div>
                    <div class="avatar-lg p-1">
                        <div class="avatar-title bg-light rounded-circle">
                            <img src="/Admin/dist/material/assets/images/users/multi-user.jpg" id="usrprofile-img-file-image" class="usrprofile-img-file-input avatar-md h-auto rounded-circle object-fit-cover" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="mb-3">
                    <label for="employeenameInput" class="form-label">Employee Name <span class="c_ff1100">*</span></label>
                <input type="text" class="form-control" id="employeenameInput" placeholder="Enter your Employee Name" required>
                    <div id="divMessages" class="invalid-feedback">
                        Employee Name Field is Mandatory.
                    </div>
            </div>
            <div class="mb-3">
                    <label for="emailidInput" class="form-label">Email ID <span class="c_ff1100">*</span></label>
                <input type="text" class="form-control" id="emailidInput" placeholder="Enter Email Id" required>
                    <div id="divMessages" class="invalid-feedback">
                        Email ID Field is Mandatory.
                    </div>
            </div>
            <div class="mb-3">
                    <label for="UseridInput" class="form-label">User ID (In English Only) <span class="c_ff1100">*</span></label>
                <input type="text" id="UseridInput" class="form-control" placeholder="Enter User Id" required>
                    <div  id="divMessages"  class="invalid-feedback">
                        User ID Field is Mandatory.
                    </div>
            </div>
            <div class="row gy-4 mb-3">
                <div class="col-md-6">
                    <div>
                            <label for="PasswordInput" class="form-label">Password <span class="c_ff1100">*</span></label>
                            <input type="password" class="form-control" id="PasswordInput" placeholder="Enter Password" required>
                            <div id="divMessages" class="invalid-feedback">
                                Password Field is Mandatory.
                            </div>
                        </div>
                </div>
                <div class="col-md-6">
                    <div>
                            <label for="ConfirmPasswordInput" class="form-label">Confirm Password <span class="c_ff1100">*</span></label>
                            <input type="password" class="form-control" id="ConfirmPasswordInput" placeholder="Enter Confirm Password" required>
                            <div  id="divMessages"  class="invalid-feedback">
                                Confirm Password Field is Mandatory.
                            </div>
                            <div  id="divMessages"  class="invalid-feedback mismatch" >
                                 Password Fields are mismatch.
                            </div>
                        </div>
                </div>
            </div>

            <div class="mb-3">
                    <label for="PermisionToInput" class="form-label">Permision To <span class="c_ff1100">*</span></label>
                <select class="form-select" aria-label=".form-select-sm example" id="PermisionToInput">
                    <option selected>Please Select</option> 
                </select>
                    <div  id="divMessages"  class="invalid-feedback">
                        Permision Page Field is Mandatory.
                    </div>
            </div> 
            </div>
            <div class="modal-footer">
                <div class="hstack gap-2 justify-content-end">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-success" onclick="fnOnsaveUser()" id="add-btn">Add</button>
            </div>
            </div>
                 
        </div>
    </div>
    </div>


<!-- Modal -->
<div class="modal fade zoomIn" id="editUser" tabindex="-1" aria-labelledby="editUserLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserLabel">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
           
            <div class="modal-body">
                <div class="tab-content">
                    <div class="tab-pane active" id="personalDetails" role="tabpanel">
                        
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="editemployeenameInput" class="form-label">Employee Name</label>
                                    <input type="text" class="form-control" id="editemployeenameInput" placeholder="Enter your Employee Name">
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="UserTypeInput" class="form-label">User Type</label>
                                    <select class="form-select" aria-label=".form-select-sm example" id="UserTypeInput">
                                        <option>Please Select</option>
                                        <option selected value="User">User</option> 
                                    </select>
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="editPermisionToInput" class="form-label">Permision To</label>
                                    <select class="form-select" aria-label=".form-select-sm example" id="editPermisionToInput">
                                        <option selected>Please Select</option>
                                        @*  <option value="ACF">Accounts & Finance </option>
                                        <option value="ACT">Accounts Only</option>
                                        <option value="ADM">Admin</option>
                                        <option value="ADP">Admin & Payroll</option>
                                        <option value="IVR">Inventory</option>
                                        <option value="MSR">Master</option>
                                        <option value="PRL">Payroll</option>
                                        <option value="PDN">Production</option>
                                        <option value="PUR">Purchase</option>
                                        <option value="SLS">Sales</option> *@
                                    </select>
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="StoreNameInput" class="form-label">Store Name/Location</label>
                                    <select class="form-select" aria-label=".form-select-sm example" id="StoreNameInput">
                                        <option>Please Select</option>
                                        <option selected value="MNL">Main Location</option>
                                    </select>
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="CounterNameInput" class="form-label">Counter Name</label>
                                    <select class="form-select" aria-label=".form-select-sm example" id="CounterNameInput">
                                        <option>Please Select</option>
                                        <option selected value="1">NONE</option>
                                    </select>
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="editemailidInput" class="form-label">Email ID</label>
                                    <input type="text" class="form-control" id="editemailidInput" placeholder="Enter Email Id">
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-4">
                                <div class="mb-3">
                                    <label for="editUseridInput" class="form-label">User ID (In English Only)</label>
                                    <input type="text" id="editUseridInput" class="form-control" placeholder="Enter User Id">
                                       
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-4">
                                <div class="mb-3">
                                    <label for="editPasswordInput" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="editPasswordInput" placeholder="Enter Password">
                                        
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-4">
                                <div class="mb-3">
                                    <label for="editConfirmPasswordInput" class="form-label">Confirm Password</label>
                                    <input type="password" class="form-control" id="editConfirmPasswordInput" placeholder="Enter Confirm Password">
                                       
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="SecurityQues1Input" class="form-label">Security Question 1</label>
                                    <input type="text" class="form-control" id="SecurityQues1Input" placeholder="Enter Question">

                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="answer1Input" class="form-label">Answer 1</label>
                                    <input type="text" class="form-control" id="answer1Input" placeholder="Enter Answer">
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="SecurityQues2Input" class="form-label">Security Question 2</label>
                                    <input type="text" class="form-control" id="SecurityQues2Input" placeholder="Enter Question">

                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label for="answer2Input" class="form-label">Answer 2</label>
                                    <input type="text" class="form-control" id="answer2Input" placeholder="Enter Answer">
                                </div>
                            </div>
                            <!--end col-->
                            <div class="col-lg-12">
                                <div class="hstack gap-2 justify-content-end">
                                    <button class="btn btn-link link-success text-decoration-none fw-medium" data-bs-dismiss="modal"><i class="ri-close-line me-1 align-middle"></i> Close</button>
                                    <button type="submit" onclick="fnOnUpdateUser()" class="btn btn-primary"><i class="ri-save-3-line align-bottom me-1"></i> Update</button>
                                </div>
                            </div>
                            <!--end col-->
                        </div>
                            <!--end row-->
                        
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
<!--end modal-->

<!-- removeItemModal -->
<div id="removeItemModal" class="modal fade zoomIn" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="btn-close"></button>
            </div>
            <div class="modal-body">
                <div class="mt-2 text-center">
                    <lord-icon src="https://cdn.lordicon.com/gsqxdxog.json" trigger="loop" colors="primary:#f7b84b,secondary:#f06548" style="width:100px;height:100px"></lord-icon>
                    <div class="mt-4 pt-2 fs-15 mx-4 mx-sm-5">
                        <h4>Are you sure ?</h4>
                        <p class="text-muted mx-4 mb-0">Are you sure you want to remove this Account Group ?</p>
                    </div>
                </div>
                <div class="d-flex gap-2 justify-content-center mt-4 mb-2">
                    <input type="text" id="hdnIDInput" hidden />
                    <button type="button" class="btn w-sm btn-light" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn w-sm btn-danger " onclick="fnDeleteRecord()" id="delete-product">Yes, Delete It!</button>
                </div>
            </div>

        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div class="card">
    <img class="img" style="width:100%; height:auto" id="ProcessImage" hidden="hidden" />
</div>

<div class="card">
    <textarea id="textAreaProcessImage" rows="30" cols="50" hidden="hidden"></textarea>
    <input type="text" id="hdnIDInput" hidden />
</div>



@section scripts{      

    <script>

        $(document).ready(function () {             
            getComponentCategories();             
        });

        const inputImage = document.getElementById("usrprofile-img-file-input");
        const showImage = document.getElementById("usrprofile-img-file-image");
        const ProcessImage = document.getElementById("ProcessImage");
        const textAreaImage = document.getElementById("textAreaProcessImage");
        inputImage.addEventListener("change", (e) => {
            uploadImage(e);
        });
        const uploadImage = async (event) => {
            const file = event.target.files[0];
            const base64 = await convertBase64(file);
            ProcessImage.src = base64;
            showImage.src = base64;
            textAreaImage.innerText = base64;
        };
        const convertBase64 = (file) => {
            return new Promise((resolve, reject) => {
                const fileReader = new FileReader();
                fileReader.readAsDataURL(file);
                fileReader.onload = () => {
                    resolve(fileReader.result);
                };
                fileReader.onerror = (error) => {
                    reject(error);
                };
            });
        };
          
        var str_dt = function (e) {
            var e = new Date(e),
                t = (e.getHours() + ":" + e.getMinutes()).split(":"),
                a = 12 <= (n = t[0]) ? "PM" : "AM",
                n = (n %= 12) || 12,
                t = (t = t[1]) < 10 ? "0" + t : t;
            return month = "" + ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][e.getMonth()], day = "" + e.getDate(), year = e.getFullYear(), month.length < 2 && (month = "0" + month), [(day = day.length < 2 ? "0" + day : day) + " " + month + "," + year + " <small class='text-muted'>" + n + ":" + t + " " + a + "</small>"]
        }, 
        checkAll = document.getElementById("checkAll"),
        perPage = (checkAll && (checkAll.onclick = function () {
            for (var e = document.querySelectorAll('.form-check-all input[type="checkbox"]'), t = document.querySelectorAll('.form-check-all input[type="checkbox"]:checked').length, a = 0; a < e.length; a++) e[a].checked = this.checked, e[a].checked ? e[a].closest("tr").classList.add("table-active") : e[a].closest("tr").classList.remove("table-active");
            document.getElementById("remove-actions").style.display = 0 < t ? "none" : "block"
        }), 5),
        editlist = !1,
        options = {
                valueNames: ["id", "userId", "userName", "userDepartment", "userType", "userEmailId", "isActive", "action"], //, "status"
            page: perPage,
            pagination: !0,
            plugins: [ListPagination({
                left: 2,
                right: 2
            })]
        },
        userList = new List("userList", options).on("updated", function (e) {
            0 == e.matchingItems.length ? document.getElementsByClassName("noresult")[0].style.display = "block" : document.getElementsByClassName("noresult")[0].style.display = "none";
            var t = 1 == e.i,
                a = e.i > e.matchingItems.length - e.page;
            document.querySelector(".pagination-prev.disabled") && document.querySelector(".pagination-prev.disabled").classList.remove("disabled"), document.querySelector(".pagination-next.disabled") && document.querySelector(".pagination-next.disabled").classList.remove("disabled"), t && document.querySelector(".pagination-prev").classList.add("disabled"), a && document.querySelector(".pagination-next").classList.add("disabled"), e.matchingItems.length <= perPage ? document.querySelector(".pagination-wrap").style.display = "none" : document.querySelector(".pagination-wrap").style.display = "flex", e.matchingItems.length == perPage && document.querySelector(".pagination.listjs-pagination").firstElementChild.children[0].click(), 0 < e.matchingItems.length ? document.getElementsByClassName("noresult")[0].style.display = "none" : document.getElementsByClassName("noresult")[0].style.display = "block"
        });
       
         const xhttp = new XMLHttpRequest;
        xhttp.onload = function () {
            var e = JSON.parse(this.responseText);
            Array.from(e).forEach(function (e) {
                userList.add({
                    id: e.id,
                    userId: e.userId,
                    userName: e.userName,
                  //  date: str_dt(e.date),
                    userDepartment: e.userDepartment,
                    userType: e.userType,
                    userEmailId: e.userEmailId,
                    isActive: isStatus(e.isActive),
                    action: '<ul class="list-inline hstack gap-2 mb-0">' +
                        '<li class= "list-inline-item edit" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-placement="top" title="Edit">' +
                        '<a href="#" onclick="fnEditRecord(' + e.id + ')" class= "text-primary d-inline-block edit-item-btn">' +
                        '<i class="ri-pencil-fill fs-16" > </i>' +
                        '</a>' +
                        '</li>'+
                        '<li class="list-inline-item" data-bs-toggle="tooltip" data-bs-trigger="hover" data-bs-placement="top" title="Remove">'+
                        '<a class="text-danger d-inline-block remove-item-btn" onclick="fnDeleteRecordPopup(' + e.id + ')" href="#">' +
                        '<i class="ri-delete-bin-5-fill fs-16"> </i>'+
                        '</a>'+
                        '</li>'+
                        '</ul>',
                    //status: isStatus(e.status)
                }), userList.sort("id", {
                    order: "desc"
                }) // refreshCallbacks()
            }), userList.remove("id", 'VZ01')
        }, xhttp.open("GET", "/api/UserApi/"), xhttp.send();

        function isStatus(e) {
            switch (e) {
                case true:
                    return '<span class="badge bg-success-subtle text-success text-uppercase">Active</span>';
                case false:
                    return '<span class="badge bg-danger-subtle text-danger text-uppercase">Inactive</span>';
                
                }
        }


        const PermisionPagesarray = [];
        function getComponentCategories() {
            $.ajax({
                url: '/api/PermisionsApi/',
                beforeSend: function () {
                    // $('#loader').show();
                    // $('#loaderTop').show();
                },
                success: function (data) {

                    console.log(data);
                    const selectCategory = document.getElementById('PermisionToInput');
                    data.forEach(function (category) {  
                        const optionDRP = document.createElement('option');
                        optionDRP.value = category.pagecode;
                        optionDRP.textContent = category.permisionpages;
                        selectCategory.appendChild(optionDRP);  
                    });
                    const selectCategory0 = document.getElementById('editPermisionToInput');
                    data.forEach(function (category0) {
                        const optionDRP0 = document.createElement('option');
                        optionDRP0.value = category0.pagecode;
                        optionDRP0.textContent = category0.permisionpages;
                        selectCategory0.appendChild(optionDRP0);
                    });
                    console.log(data);
                    const selectCategory1 = document.getElementById('idsearchPermissionTo');
                    data.forEach(function (category1) {
                        const optionDRP1 = document.createElement('option');
                        optionDRP1.value = category1.permisionpages;
                        optionDRP1.textContent = category1.permisionpages;
                        selectCategory1.appendChild(optionDRP1); 
                    });
                    // $('#loader').hide();
                    // $('#loaderTop').hide();
                },
                error: function (e) {
                    // alert(e.responseText);
                    // $('#loader').hide();
                    console.log(e.responseText);
                },
                complete: function () {
                    // $('#loader').hide();
                }
            });
        }

        function validateEmail(email) {

            try {
                // Create an input element
                var input = document.createElement('input');
                input.type = 'email';
                input.value = email;

                // Attempt to set the input's value to the provided email
                // If it's not a valid email, this will throw an error
                return input.checkValidity();
            } catch (error) {
                return false;
            }
        }
         
        function fnOnsaveUser()
        { 
            if ($("#employeenameInput").val().length == 0 ||
                $("#emailidInput").val().length == 0 ||
                $("#UseridInput").val().length == 0  ||
                $("#PermisionToInput").val().length == 0 ||
                $("#PasswordInput").val().length == 0||
                $("#ConfirmPasswordInput").val().length == 0) {

                Swal.fire(
                    {
                        title: 'User Creation',
                        text: 'Please Fill all the details!',
                        icon: 'error',
                        showCancelButton: true,
                        confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                        cancelButtonClass: 'btn btn-danger w-xs mt-2',
                        buttonsStyling: false,
                        showCloseButton: true
                    }
                )
                return;
            }
            else {
                
                if ($("#PasswordInput").val() != $("#ConfirmPasswordInput").val())
                {
                    Swal.fire(
                        {
                            title: 'User Creation',
                            text: "Password Mismatch",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                            cancelButtonClass: 'btn btn-danger w-xs mt-2',
                            buttonsStyling: false,
                            showCloseButton: true
                        }
                    );
                    return;
                }

                if (!validateEmail($("#emailidInput").val())) {
                    Swal.fire(
                        {
                            title: 'User Creation',
                            text: "Please enter Valid Email Address",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                            cancelButtonClass: 'btn btn-danger w-xs mt-2',
                            buttonsStyling: false,
                            showCloseButton: true
                        }
                    );
                    return;
                }
                var Users = {
                    UserName: $("#employeenameInput").val(),
                    UserEmailId: $("#emailidInput").val(),
                    UserId: $("#UseridInput").val(),
                    IsActive: true,
                    IsLogin: false,
                    UserDepartment: $("#PermisionToInput").val(),
                    SQLUserID: $("#UseridInput").val(),
                    UserPasswordHash: $("#ConfirmPasswordInput").val()
                }
                
                $.ajax({
                    url: "/api/UserApi",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(Users),
                    dataType: 'json',
                    async: false,
                    cache: false,
                    beforeSend: function () {
                        // $('#divAlert').show();
                    },
                    //success: function (data, jqXHR) {
                    success: function (data) {

                        if (data.status) {
                            Swal.fire(
                                {
                                    title: 'User Creation',
                                    text: data.message,
                                    icon: 'success',
                                    showCancelButton: true,
                                    confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                                    cancelButtonClass: 'btn btn-danger w-xs mt-2',
                                    buttonsStyling: false,
                                    showCloseButton: true
                                }
                            )
                            $('#addUser').modal('hide');
                            fnClearAllFields();
                            // setTimeout(location.reload(true), 10000);
                        }
                        else {
                            Swal.fire(
                                {
                                    title: 'User Creation',
                                    text: data.message,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                                    cancelButtonClass: 'btn btn-danger w-xs mt-2',
                                    buttonsStyling: false,
                                    showCloseButton: true
                                }
                            )
                        }

                    },
                    complete: function () {

                        // $('#divAlert').hide();
                        // $('#SampleModal').modal('hide');
                        // location.reload(true)
                    },
                    error: function (e) {
                        console.log(e.responseText);
                    }
                });
            }           
        }
          
        function fnEditRecord(Id) {

            $("#hdnIDInput").val(Id);
              
            $.ajax({
                url: '/api/UserApi/' + Id,
                type: "GET",
                contentType: "application/json; charset=utf-8",
                beforeSend: function () {
                    //$('#divLoader').show();
                },
                success: function (data) {
                    console.log(data);

                    $('#editUser').modal('show');

                    $("#hdnIDInput").val(data.id);
                    $("#editemployeenameInput").val(data.userName);
                    $("#editemailidInput").val(data.userEmailId);
                    $("#editUseridInput").val(data.userId);
                    $("#editPasswordInput").val(data.userPassword);
                    $("#editConfirmPasswordInput").val(data.userPassword);
                    $("#editPermisionToInput").val(data.userDepartment);
                },
                complete: function (e) {
                },
                error: function (e) { 
                    console.log(e.responseText);
                }
            });

        }
        function fnOnUpdateUser() {

            var Users = {
                Id: parseInt($("#hdnIDInput").val()),
                UserName: $("#editemployeenameInput").val(),
                // UserEmailId: $("#editemailidInput").val(),
                // UserId: $("#editUseridInput").val(),
                // UserSecurityQ1: $("#SecurityQues1Input").val(),
                // UserSecurityQ2: $("#SecurityQues2Input").val(),
                // UserSecurityA1: $("#answer1Input").val(),
                // UserSecurityA2: $("#answer2Input").val(),
                // UserDepartment: $("#editPermisionToInput").val(),
                // LocationName: $("#StoreNameInput").val(),
                // IsActive: true,
                // IsLogin: false,
                // SQLUserID: $("#editUseridInput").val(),
                // // SQLpwd: $("#ConfirmPasswordInput").val(),
                // CounterID: $("#CounterNameInput").val(),
                // UserPasswordHash: $("#editConfirmPasswordInput").val()
            }

            var Accgroup = {
                Id: parseInt($("#hdnIDInput").val()),
                UserName: $("#editemployeenameInput").val(),
            }
            $.ajax({
                url: "/api/UsersApi",
                type: "PUT",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(Accgroup),
                beforeSend: function () {
                    // $('#divAlert').show();
                },
                //success: function (data, jqXHR) {
                success: function (data) {

                    if (data.status) {
                        Swal.fire(
                            {
                                title: 'Account Group',
                                text: data.message,
                                icon: 'success',
                                showCancelButton: true,
                                confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                                cancelButtonClass: 'btn btn-danger w-xs mt-2',
                                buttonsStyling: false,
                                showCloseButton: true
                            }
                        )
                        $('#addGroup').modal('hide'); 
                    }
                    else {
                        Swal.fire(
                            {
                                title: 'Account Group',
                                text: data.message,
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                                cancelButtonClass: 'btn btn-danger w-xs mt-2',
                                buttonsStyling: false,
                                showCloseButton: true
                            }
                        )
                    }

                },
                complete: function () {
                    // $('#divAlert').hide();
                    // $('#SampleModal').modal('hide');
                    // location.reload(true)
                },
                error: function (e) {
                    $('.error').show();
                }
            });
        }
        function fnOnUpdateUser1() {

            if ($("#editemployeenameInput").val().length == 0 
                || $("#editConfirmPasswordInput").val().length == 0 
                || $("#editPasswordInput").val().length == 0
                || $("#editPermisionToInput").val().length == 0
                || $("#editemailidInput").val().length == 0 
                || $("#editUseridInput").val().length == 0 ) {
                //alert('Please fill in all details');
                Swal.fire(
                    {
                        title: 'User Creation',
                        text: 'Please Fill Mandatory details!',
                        icon: 'error',
                        showCancelButton: true,
                        confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                        cancelButtonClass: 'btn btn-danger w-xs mt-2',
                        buttonsStyling: false,
                        showCloseButton: true
                    }
                )
                return;
            }
            else {
                if (!validateEmail($("#editemailidInput").val())) {
                    Swal.fire(
                        {
                            title: 'User Creation',
                            text: "Please enter Valid Email Address",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                            cancelButtonClass: 'btn btn-danger w-xs mt-2',
                            buttonsStyling: false,
                            showCloseButton: true
                        }
                    );
                    return;
                }

                var Users = {
                    Id: parseInt($("#hdnIDInput").val()),
                    UserName: $("#editemployeenameInput").val(),
                    UserEmailId: $("#editemailidInput").val(),
                    UserId: $("#editUseridInput").val(),
                    UserSecurityQ1: $("#SecurityQues1Input").val(),
                    UserSecurityQ2: $("#SecurityQues2Input").val(),
                    UserSecurityA1: $("#answer1Input").val(),
                    UserSecurityA2: $("#answer2Input").val(),
                    UserDepartment: $("#editPermisionToInput").val(),
                    LocationName: $("#StoreNameInput").val(),
                    IsActive: true,
                    IsLogin: false,
                    SQLUserID: $("#editUseridInput").val(),
                    // SQLpwd: $("#ConfirmPasswordInput").val(),
                    CounterID: $("#CounterNameInput").val(),
                    UserPasswordHash: $("#editConfirmPasswordInput").val()
                }

                $.ajax({
                    url: "/api/UserApi",
                    type: "PUT",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(Users),
                    beforeSend: function () {
                        // $('#divAlert').show();
                    },
                    //success: function (data, jqXHR) {
                    success: function (data) {

                        if (data.status) {
                            Swal.fire(
                                {
                                    title: 'User Updation',
                                    text: data.message,
                                    icon: 'success',
                                    showCancelButton: true,
                                    confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                                    cancelButtonClass: 'btn btn-danger w-xs mt-2',
                                    buttonsStyling: false,
                                    showCloseButton: true
                                }
                            )
                            $('#editUser').modal('hide');
                            fnClearAllFields();
                            // setTimeout(location.reload(true), 10000);
                        }
                        else {
                            Swal.fire(
                                {
                                    title: 'User Updation',
                                    text: data.message,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                                    cancelButtonClass: 'btn btn-danger w-xs mt-2',
                                    buttonsStyling: false,
                                    showCloseButton: true
                                }
                            )
                        }

                    },
                    complete: function () {
                         
                    },
                    error: function (e) {
                        console.log(e.responseText);
                    }
                });
            }
        }
        
        function fnDeleteRecordPopup(Id) {
            $("#hdnIDInput").val(Id);
            $('#removeItemModal').modal('show');
        }

        function fnDeleteRecord() {
            var Id = $("#hdnIDInput").val();
            if (Id > 0) {
                $.ajax({
                    url: '/api/UserApi/' + Id,
                    type: "DELETE",
                    dataType: 'json',
                    beforeSend: function () {
                        // $('#loader').show();
                    },
                    success: function (data) {
                        console.log(data);
                        Swal.fire(
                            {
                                title: 'Users',
                                text: data.message,
                                icon: 'success',
                                showCancelButton: true,
                                confirmButtonClass: 'btn btn-primary w-xs me-2 mt-2',
                                cancelButtonClass: 'btn btn-danger w-xs mt-2',
                                buttonsStyling: false,
                                showCloseButton: true
                            }
                        )
                    },
                    complete: function () {
                        location.reload(true)
                    },
                    error: function (e) {
                        // alert(e.responseText);

                        console.log(e.responseText);
                    }
                });

            }

        }
         
        function fnClearAllFields()
        {
            $("#hdnIDInput").val("");
            $("#editemployeenameInput").val("");
            $("#editemailidInput").val("");
            $("#editUseridInput").val("");
            $("#editPasswordInput").val("");
            $("#editConfirmPasswordInput").val("");
            $("#editPermisionToInput").val("");

            $("#employeenameInput").val("");
            $("#emailidInput").val("");
            $("#UseridInput").val("");
            $("#PermisionToInput").val("");
            $("#UseridInput").val("");
            $("#ConfirmPasswordInput").val("");
        }

        function fnValidateFields() {
             
            var UserName = $("#editemployeenameInput").val();
            if (UserName == "" && UserName == undefined && UserName == null) {

                $('#divMessages').removeClass('invalid-feedback');
                $('#divMessages').addClass('valid-feedback');
                $("#divMessages").html('Payment Completed Successfully!.You will be automatically redirected to login page in a moment ');


            }
            var UserEmailId = $("#editemailidInput").val();
            var UserId = $("#editUseridInput").val();
            var UserSecurityQ1 = $("#SecurityQues1Input").val();
            var UserSecurityQ2 = $("#SecurityQues2Input").val();
            var UserSecurityA1 = $("#answer1Input").val();
            var UserSecurityA2 = $("#answer2Input").val();
            var UserDepartment = $("#editPermisionToInput").val();
            var LocationName = $("#StoreNameInput").val(); 
            var UserPasswordHash =  $("#editConfirmPasswordInput").val();

        }

        function SearchData() {
            var s = document.getElementById("idUserType").value,
                r = document.getElementById("idsearchPermissionTo").value; 
            userList.filter(function (e) {
                var a = !1,
                    n = !1,
                    a = "all" == e.values().userType || "all" == s || e.values().userType == s;
                    n = "all" == e.values().userDepartment || "all" == r || e.values().userDepartment == r;
               
                if ((s == "all" && r != "all") || (s != "all" && r == "all")) {
                    return e.values().userType == s || e.values().userDepartment == r;
                }
                else if (s != "all" && r != "all") {
                    return e.values().userType == s && e.values().userDepartment == r;
                }
                else {
                    return a && n;
                } 
            }), userList.update()
         }



       
        // //isValue = (isCount = (new DOMParser).parseFromString(userList.items.slice(-1)[0]._values.id, "text/html")).body.firstElementChild.innerHTML,
        // var idField = document.getElementById("orderId"),
        //     customerNameField = document.getElementById("customername-field"),
        //     productNameField = document.getElementById("productname-field"),
        //     dateField = document.getElementById("date-field"),
        //     amountField = document.getElementById("amount-field"),
        //     paymentField = document.getElementById("payment-field"),
        //     statusField = document.getElementById("delivered-status"),
        //     addBtn = document.getElementById("add-btn"),
        //     editBtn = document.getElementById("edit-btn"),
        //     removeBtns = document.getElementsByClassName("remove-item-btn"),
        //     editBtns = document.getElementsByClassName("edit-item-btn"),
        //     tabEl = (refreshCallbacks(), document.querySelectorAll('a[data-bs-toggle="tab"]'));
             
        // function filterUser(e) {
        //     var t = e;
        //     userList.filter(function (e) {
        //         e = (matchData = (new DOMParser).parseFromString(e.values().status, "text/html")).body.firstElementChild.innerHTML;
        //         return "All" == e || "All" == t || e == t
        //     }), userList.update()
        // }

        // function updateList() {
        //     var t = document.querySelector("input[name=status]:checked").value;
        //     data = userList.filter(function (e) {
        //         return "All" == t || e.values().sts == t
        //     }), userList.update()
        // }
        // Array.from(tabEl).forEach(function (e) {
        //     e.addEventListener("shown.bs.tab", function (e) {
        //         filterUser(e.target.id)
        //     })
        // }), document.getElementById("addUser").addEventListener("show.bs.modal", function (e) {
        //     e.relatedTarget.classList.contains("edit-item-btn") ? (document.getElementById("exampleModalLabel").innerHTML = "Edit User", document.getElementById("addUser").querySelector(".modal-footer").style.display = "block", document.getElementById("add-btn").innerHTML = "Update") : e.relatedTarget.classList.contains("add-btn") ? (document.getElementById("modal-id").style.display = "none", document.getElementById("exampleModalLabel").innerHTML = "Add User", document.getElementById("addUser").querySelector(".modal-footer").style.display = "block", document.getElementById("add-btn").innerHTML = "Add User") : (document.getElementById("exampleModalLabel").innerHTML = "List Users", document.getElementById("addUser").querySelector(".modal-footer").style.display = "none")
        // }), ischeckboxcheck(), document.getElementById("addUser").addEventListener("hidden.bs.modal", function () {
        //     clearFields()
        // }), document.querySelector("#userList").addEventListener("click", function () {
        //     ischeckboxcheck()
        // });
        // var table = document.getElementById("userTable"),
        //     tr = table.getElementsByTagName("tr"),
        //     trlist = table.querySelectorAll(".list tr");

       
        // var count = 13,
        //     forms = document.querySelectorAll(".tablelist-form"),
        //     example = (Array.prototype.slice.call(forms).forEach(function (a) {
        //         a.addEventListener("submit", function (e) {
        //             var t;
        //             a.checkValidity() ? (e.preventDefault(), "" === customerNameField.value || "" === productNameField.value || "" === dateField.value || "" === amountField.value || "" === paymentField.value || editlist ? "" !== customerNameField.value && "" !== productNameField.value && "" !== dateField.value && "" !== amountField.value && "" !== paymentField.value && editlist && (t = userList.get({
        //                 id: idField.value
        //             }), Array.from(t).forEach(function (e) {
        //                 (isid = (new DOMParser).parseFromString(e._values.id, "text/html")).body.firstElementChild.innerHTML == itemId && e.values({
        //                     id: '<a href="javascript:void(0);" class="fw-medium link-primary">' + idField.value + "</a>",
        //                     customer_name: customerNameField.value,
        //                     product_name: productNameField.value,
        //                     date: dateField.value.slice(0, 14) + '<small class="text-muted">' + dateField.value.slice(14, 22),
        //                     amount: amountField.value,
        //                     payment: paymentField.value,
        //                     status: isStatus(statusField.value)
        //                 })
        //             }), document.getElementById("close-modal").click(), clearFields(), Swal.fire({
        //                 position: "center",
        //                 icon: "success",
        //                 title: "Order updated Successfully!",
        //                 showConfirmButton: !1,
        //                 timer: 2e3,
        //                 showCloseButton: !0
        //             })) : (userList.add({
        //                 id: '<a href="apps-ecommerce-order-details.html" class="fw-medium link-primary">#VZ' + count + "</a>",
        //                 customer_name: customerNameField.value,
        //                 product_name: productNameField.value,
        //                 date: dateField.value,
        //                 amount: "$" + amountField.value,
        //                 payment: paymentField.value,
        //                 status: isStatus(statusField.value)
        //             }), userList.sort("id", {
        //                 order: "desc"
        //             }), document.getElementById("close-modal").click(), clearFields(), refreshCallbacks(), filterUser("All"), count++, Swal.fire({
        //                 position: "center",
        //                 icon: "success",
        //                 title: "User inserted successfully!",
        //                 showConfirmButton: !1,
        //                 timer: 2e3,
        //                 showCloseButton: !0
        //             }))) : (e.preventDefault(), e.stopPropagation())
        //         }, !1)
        //     }), new Choices(paymentField)),
        //     statusVal = new Choices(statusField),
        //     productnameVal = new Choices(productNameField);

        // function isStatus(e) {
        //     switch (e) {
        //         case "Delivered":
        //             return '<span class="badge bg-success-subtle text-success text-uppercase">' + e + "</span>";
        //         case "Cancelled":
        //             return '<span class="badge bg-danger-subtle text-danger text-uppercase">' + e + "</span>";
        //         case "Inprogress":
        //             return '<span class="badge bg-secondary-subtle text-secondary text-uppercase">' + e + "</span>";
        //         case "Pickups":
        //             return '<span class="badge bg-info-subtle text-info text-uppercase">' + e + "</span>";
        //         case "Returns":
        //             return '<span class="badge bg-primary-subtle text-primary text-uppercase">' + e + "</span>";
        //         case "Pending":
        //             return '<span class="badge bg-warning-subtle text-warning text-uppercase">' + e + "</span>"
        //     }
        // }

        function ischeckboxcheck() {
            Array.from(document.getElementsByName("checkAll")).forEach(function (a) {
                a.addEventListener("change", function (e) {
                    1 == a.checked ? e.target.closest("tr").classList.add("table-active") : e.target.closest("tr").classList.remove("table-active");
                    var t = document.querySelectorAll('[name="checkAll"]:checked').length;
                    e.target.closest("tr").classList.contains("table-active"), document.getElementById("remove-actions").style.display = 0 < t ? "block" : "none"
                })
            })
        }

        function refreshCallbacks() {
            removeBtns && Array.from(removeBtns).forEach(function (e) {
                e.addEventListener("click", function (e) {
                    e.target.closest("tr").children[1].innerText, itemId = e.target.closest("tr").children[1].innerText;
                    e = userList.get({
                        id: itemId
                    });
                    Array.from(e).forEach(function (e) {
                        var t = (deleteid = (new DOMParser).parseFromString(e._values.id, "text/html")).body.firstElementChild;
                        deleteid.body.firstElementChild.innerHTML == itemId && document.getElementById("delete-record").addEventListener("click", function () {
                            userList.remove("id", t.outerHTML), document.getElementById("deleteRecord-close").click()
                        })
                    })
                })
            }), editBtns && Array.from(editBtns).forEach(function (e) {
                e.addEventListener("click", function (e) {
                    e.target.closest("tr").children[1].innerText, itemId = e.target.closest("tr").children[1].innerText;
                    e = userList.get({
                        id: itemId
                    });
                    Array.from(e).forEach(function (e) {
                        var t = (isid = (new DOMParser).parseFromString(e._values.id, "text/html")).body.firstElementChild.innerHTML;
                        t == itemId && (editlist = !0, idField.value = t, customerNameField.value = e._values.customer_name, productNameField.value = e._values.product_name, dateField.value = e._values.date, amountField.value = e._values.amount, example && example.destroy(), example = new Choices(paymentField, {
                            searchEnabled: !1
                        }), t = e._values.payment, example.setChoiceByValue(t), productnameVal && productnameVal.destroy(), productnameVal = new Choices(productNameField, {
                            searchEnabled: !1
                        }), t = e._values.product_name, productnameVal.setChoiceByValue(t), statusVal && statusVal.destroy(), statusVal = new Choices(statusField, {
                            searchEnabled: !1
                        }), t = (val = (new DOMParser).parseFromString(e._values.status, "text/html")).body.firstElementChild.innerHTML, statusVal.setChoiceByValue(t), flatpickr("#date-field", {
                            enableTime: !0,
                            dateFormat: "d M, Y, h:i K",
                            defaultDate: e._values.date
                        }))
                    })
                })
            })
        }

        function clearFields() {
             
            customerNameField.value = "", 
            productNameField.value = "", 
            dateField.value = "", 
            amountField.value = "", 
            paymentField.value = "", 
            example && example.destroy(),
            example = new Choices(paymentField),
            productnameVal && productnameVal.destroy(), 
            productnameVal = new Choices(productNameField), 
            statusVal && statusVal.destroy(), 
            statusVal = new Choices(statusField)
        }

        function deleteMultiple() {
            ids_array = [];
            var e, t = document.querySelectorAll(".form-check [value=option1]");
            for (i = 0; i < t.length; i++) 1 == t[i].checked && (e = t[i].parentNode.parentNode.parentNode.querySelector("td a").innerHTML, ids_array.push(e));
            "undefined" != typeof ids_array && 0 < ids_array.length ? Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: !0,
                confirmButtonClass: "btn btn-primary w-xs me-2 mt-2",
                cancelButtonClass: "btn btn-danger w-xs mt-2",
                confirmButtonText: "Yes, delete it!",
                buttonsStyling: !1,
                showCloseButton: !0
            }).then(function (e) {
                if (e.value) {
                    for (i = 0; i < ids_array.length; i++) userList.remove("id", '<a href="apps-ecommerce-order-details.html" class="fw-medium link-primary">' + ids_array[i] + "</a>");
                    document.getElementById("remove-actions").style.display = "none", document.getElementById("checkAll").checked = !1, Swal.fire({
                        title: "Deleted!",
                        text: "Your data has been deleted.",
                        icon: "success",
                        confirmButtonClass: "btn btn-info w-xs mt-2",
                        buttonsStyling: !1
                    })
                }
            }) : Swal.fire({
                title: "Please select at least one checkbox",
                confirmButtonClass: "btn btn-info",
                buttonsStyling: !1,
                showCloseButton: !0
            })
        }
        document.querySelector(".pagination-next").addEventListener("click", function () {
            document.querySelector(".pagination.listjs-pagination") && 
            document.querySelector(".pagination.listjs-pagination").querySelector(".active") &&
            document.querySelector(".pagination.listjs-pagination").querySelector(".active").nextElementSibling.children[0].click()
        }), 
        document.querySelector(".pagination-prev").addEventListener("click", function () {
            document.querySelector(".pagination.listjs-pagination") && 
            document.querySelector(".pagination.listjs-pagination").querySelector(".active") &&
            document.querySelector(".pagination.listjs-pagination").querySelector(".active").previousSibling.children[0].click()
        });

         
    </script>
    


}